{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport BorderlessButton from \"./BorderlessButton\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\n\nvar TouchableItem = function (_React$Component) {\n  _inherits(TouchableItem, _React$Component);\n\n  function TouchableItem() {\n    _classCallCheck(this, TouchableItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TouchableItem).apply(this, arguments));\n  }\n\n  _createClass(TouchableItem, [{\n    key: \"render\",\n    value: function render() {\n      if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n        var _this$props = this.props,\n            style = _this$props.style,\n            pressColor = _this$props.pressColor,\n            borderless = _this$props.borderless,\n            children = _this$props.children,\n            rest = _objectWithoutProperties(_this$props, [\"style\", \"pressColor\", \"borderless\", \"children\"]);\n\n        return React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n          useForeground: TouchableNativeFeedback.canUseNativeForeground(),\n          background: TouchableNativeFeedback.Ripple(pressColor, borderless)\n        }), React.createElement(View, {\n          style: style\n        }, React.Children.only(children)));\n      } else if (Platform.OS === 'ios') {\n        return React.createElement(BorderlessButton, _extends({\n          hitSlop: {\n            top: 10,\n            bottom: 10,\n            right: 10,\n            left: 10\n          },\n          disallowInterruption: true,\n          enabled: !this.props.disabled\n        }, this.props), this.props.children);\n      } else {\n        return React.createElement(TouchableOpacity, this.props, this.props.children);\n      }\n    }\n  }]);\n\n  return TouchableItem;\n}(React.Component);\n\nexport { TouchableItem as default };\n\n_defineProperty(TouchableItem, \"defaultProps\", {\n  borderless: false,\n  pressColor: 'rgba(0, 0, 0, .32)'\n});","map":{"version":3,"sources":["TouchableItem.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","TouchableItem","React","borderless","pressColor","Platform","children","TouchableNativeFeedback","style","top","bottom","right","left","disabled"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;AASA,OAAA,gBAAA;AAUA,IAAMA,wBAAwB,GAA9B,EAAA;;IAEe,a;;;;;;;;;;;6BAMJ;AASP,UACEK,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,IACAA,QAAQ,CAARA,OAAAA,IAFF,wBAAA,EAGE;AACA,YAAA,WAAA,GAA6D,KAA7D,KAAA;AAAA,YAAM,KAAN,GAAA,WAAA,CAAM,KAAN;AAAA,YAAM,UAAN,GAAA,WAAA,CAAM,UAAN;AAAA,YAAM,UAAN,GAAA,WAAA,CAAM,UAAN;AAAA,YAAuCC,QAAvC,GAAA,WAAA,CAAuCA,QAAvC;AAAA,YAAA,IAAA,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,YAAA,EAAA,YAAA,EAAA,UAAA,CAAA,CAAA;;AAEA,eACE,KAAA,CAAA,aAAA,CAAA,uBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,UAAA,aAAa,EAAEC,uBAAuB,CAFxC,sBAEiBA,EAFjB;AAGE,UAAA,UAAU,EAAEA,uBAAuB,CAAvBA,MAAAA,CAAAA,UAAAA,EAAAA,UAAAA;AAHd,SAAA,CAAA,EAKE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,UAAA,KAAK,EAAEC;AAAb,SAAA,EAAqBN,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CANzB,QAMyBA,CAArB,CALF,CADF;AANF,OAAA,MAeO,IAAIG,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;AAChC,eACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA;AACE,UAAA,OAAO,EAAE;AAAEI,YAAAA,GAAG,EAAL,EAAA;AAAWC,YAAAA,MAAM,EAAjB,EAAA;AAAuBC,YAAAA,KAAK,EAA5B,EAAA;AAAkCC,YAAAA,IAAI,EAAE;AAAxC,WADX;AAEE,UAAA,oBAAoB,EAFtB,IAAA;AAGE,UAAA,OAAO,EAAE,CAAC,KAAA,KAAA,CAAWC;AAHvB,SAAA,EAIM,KAJN,KAAA,CAAA,EAMG,KAAA,KAAA,CAPL,QACE,CADF;AADK,OAAA,MAWA;AACL,eACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAsB,KAAtB,KAAA,EACG,KAAA,KAAA,CAFL,QACE,CADF;AAKD;AACF;;;;EAhDwCX,KAAK,CAAjC,S;;SAAA,a;;gBAAMD,a,kBACG;AACpBE,EAAAA,UAAU,EADU,KAAA;AAEpBC,EAAAA,UAAU,EAAE;AAFQ,C","sourcesContent":["/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport BorderlessButton from './BorderlessButton';\n\ntype Props = ViewProps & {\n  pressColor: string;\n  disabled?: boolean;\n  borderless?: boolean;\n  delayPressIn?: number;\n  onPress?: () => void;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default class TouchableItem extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)',\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_LOLLIPOP\n    ) {\n      const { style, pressColor, borderless, children, ...rest } = this.props;\n\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n          background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n        >\n          <View style={style}>{React.Children.only(children)}</View>\n        </TouchableNativeFeedback>\n      );\n    } else if (Platform.OS === 'ios') {\n      return (\n        <BorderlessButton\n          hitSlop={{ top: 10, bottom: 10, right: 10, left: 10 }}\n          disallowInterruption\n          enabled={!this.props.disabled}\n          {...this.props}\n        >\n          {this.props.children}\n        </BorderlessButton>\n      );\n    } else {\n      return (\n        <TouchableOpacity {...this.props}>\n          {this.props.children}\n        </TouchableOpacity>\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}