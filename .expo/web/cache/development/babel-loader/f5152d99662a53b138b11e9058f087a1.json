{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { NavigationContext, NavigationRouteContext, CommonActions, useTheme } from '@react-navigation/native';\nimport { SafeAreaConsumer } from 'react-native-safe-area-context';\nimport BottomTabItem from \"./BottomTabItem\";\nvar DEFAULT_TABBAR_HEIGHT = 50;\nvar DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\nvar useNativeDriver = Platform.OS !== 'web';\nexport default function BottomTabBar(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      activeBackgroundColor = _ref.activeBackgroundColor,\n      activeTintColor = _ref.activeTintColor,\n      _ref$adaptive = _ref.adaptive,\n      adaptive = _ref$adaptive === void 0 ? true : _ref$adaptive,\n      allowFontScaling = _ref.allowFontScaling,\n      inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n      inactiveTintColor = _ref.inactiveTintColor,\n      _ref$keyboardHidesTab = _ref.keyboardHidesTabBar,\n      keyboardHidesTabBar = _ref$keyboardHidesTab === void 0 ? false : _ref$keyboardHidesTab,\n      labelPosition = _ref.labelPosition,\n      labelStyle = _ref.labelStyle,\n      showIcon = _ref.showIcon,\n      showLabel = _ref.showLabel,\n      style = _ref.style,\n      tabStyle = _ref.tabStyle;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _React$useState = React.useState(Dimensions.get('window')),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  var _React$useState3 = React.useState({\n    height: 0,\n    width: dimensions.width\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      layout = _React$useState4[0],\n      setLayout = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      keyboardShown = _React$useState6[0],\n      setKeyboardShown = _React$useState6[1];\n\n  var _React$useState7 = React.useState(function () {\n    return new Animated.Value(1);\n  }),\n      _React$useState8 = _slicedToArray(_React$useState7, 1),\n      visible = _React$useState8[0];\n\n  var routes = state.routes;\n  React.useEffect(function () {\n    if (keyboardShown) {\n      Animated.timing(visible, {\n        toValue: 0,\n        duration: 200,\n        useNativeDriver: useNativeDriver\n      }).start();\n    }\n  }, [keyboardShown, visible]);\n  React.useEffect(function () {\n    var handleOrientationChange = function handleOrientationChange(_ref2) {\n      var window = _ref2.window;\n      setDimensions(window);\n    };\n\n    var handleKeyboardShow = function handleKeyboardShow() {\n      return setKeyboardShown(true);\n    };\n\n    var handleKeyboardHide = function handleKeyboardHide() {\n      return Animated.timing(visible, {\n        toValue: 1,\n        duration: 250,\n        useNativeDriver: useNativeDriver\n      }).start(function (_ref3) {\n        var finished = _ref3.finished;\n\n        if (finished) {\n          setKeyboardShown(false);\n        }\n      });\n    };\n\n    Dimensions.addEventListener('change', handleOrientationChange);\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return function () {\n      Dimensions.removeEventListener('change', handleOrientationChange);\n\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, [visible]);\n\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n    setLayout(function (layout) {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height: height,\n          width: width\n        };\n      }\n    });\n  };\n\n  var shouldUseHorizontalLabels = function shouldUseHorizontalLabels() {\n    if (labelPosition) {\n      return labelPosition === 'beside-icon';\n    }\n\n    if (!adaptive) {\n      return false;\n    }\n\n    if (layout.width >= 768) {\n      var maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n      var flattenedStyle = StyleSheet.flatten(tabStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          maxTabItemWidth = flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          maxTabItemWidth = flattenedStyle.maxWidth;\n        }\n      }\n\n      return routes.length * maxTabItemWidth <= layout.width;\n    } else {\n      var isLandscape = dimensions.width > dimensions.height;\n      return isLandscape;\n    }\n  };\n\n  return React.createElement(SafeAreaConsumer, null, function (insets) {\n    return React.createElement(Animated.View, {\n      style: [styles.tabBar, {\n        backgroundColor: colors.card,\n        borderTopColor: colors.border\n      }, keyboardHidesTabBar ? {\n        transform: [{\n          translateY: visible.interpolate({\n            inputRange: [0, 1],\n            outputRange: [layout.height, 0]\n          })\n        }],\n        position: keyboardShown ? 'absolute' : null\n      } : null, {\n        height: DEFAULT_TABBAR_HEIGHT + (insets ? insets.bottom : 0),\n        paddingBottom: insets ? insets.bottom : 0\n      }, style],\n      pointerEvents: keyboardHidesTabBar && keyboardShown ? 'none' : 'auto'\n    }, React.createElement(View, {\n      style: styles.content,\n      onLayout: handleLayout\n    }, routes.map(function (route, index) {\n      var focused = index === state.index;\n      var options = descriptors[route.key].options;\n\n      var onPress = function onPress() {\n        var event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true\n        });\n\n        if (!focused && !event.defaultPrevented) {\n          navigation.dispatch(_objectSpread({}, CommonActions.navigate(route.name), {\n            target: state.key\n          }));\n        }\n      };\n\n      var onLongPress = function onLongPress() {\n        navigation.emit({\n          type: 'tabLongPress',\n          target: route.key\n        });\n      };\n\n      var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n      var accessibilityLabel = options.tabBarAccessibilityLabel !== undefined ? options.tabBarAccessibilityLabel : typeof label === 'string' ? \"\".concat(label, \", tab, \").concat(index + 1, \" of \").concat(routes.length) : undefined;\n      return React.createElement(NavigationContext.Provider, {\n        key: route.key,\n        value: descriptors[route.key].navigation\n      }, React.createElement(NavigationRouteContext.Provider, {\n        value: route\n      }, React.createElement(BottomTabItem, {\n        route: route,\n        focused: focused,\n        horizontal: shouldUseHorizontalLabels(),\n        onPress: onPress,\n        onLongPress: onLongPress,\n        accessibilityLabel: accessibilityLabel,\n        testID: options.tabBarTestID,\n        allowFontScaling: allowFontScaling,\n        activeTintColor: activeTintColor,\n        inactiveTintColor: inactiveTintColor,\n        activeBackgroundColor: activeBackgroundColor,\n        inactiveBackgroundColor: inactiveBackgroundColor,\n        button: options.tabBarButton,\n        icon: options.tabBarIcon,\n        label: label,\n        showIcon: showIcon,\n        showLabel: showLabel,\n        labelStyle: labelStyle,\n        style: tabStyle\n      })));\n    })));\n  });\n}\nvar styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"sources":["BottomTabBar.tsx"],"names":["DEFAULT_TABBAR_HEIGHT","DEFAULT_MAX_TAB_ITEM_WIDTH","useNativeDriver","Platform","adaptive","keyboardHidesTabBar","tabStyle","colors","useTheme","React","Dimensions","height","width","dimensions","Animated","routes","toValue","duration","handleOrientationChange","window","setDimensions","handleKeyboardShow","setKeyboardShown","handleKeyboardHide","finished","Keyboard","handleLayout","e","setLayout","layout","shouldUseHorizontalLabels","labelPosition","maxTabItemWidth","flattenedStyle","StyleSheet","isLandscape","insets","styles","backgroundColor","borderTopColor","border","transform","translateY","inputRange","outputRange","position","keyboardShown","paddingBottom","focused","index","state","options","descriptors","route","onPress","event","type","target","canPreventDefault","navigation","CommonActions","key","onLongPress","label","accessibilityLabel","tabBar","left","right","bottom","borderTopWidth","elevation","content","flex","flexDirection"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;;;;;;;AAWA,SAAA,iBAAA,EAAA,sBAAA,EAAA,aAAA,EAAA,QAAA,QAAA,0BAAA;AAMA,SAAA,gBAAA,QAAA,gCAAA;AAEA,OAAA,aAAA;AAQA,IAAMA,qBAAqB,GAA3B,EAAA;AACA,IAAMC,0BAA0B,GAAhC,GAAA;AAEA,IAAMC,eAAe,GAAGC,QAAQ,CAARA,EAAAA,KAAxB,KAAA;AAEA,eAAe,SAAA,YAAA,CAAA,IAAA,EAiBL;AAAA,MAjB2B,KAiB3B,GAAA,IAAA,CAjB2B,KAiB3B;AAAA,MAjB2B,UAiB3B,GAAA,IAAA,CAjB2B,UAiB3B;AAAA,MAjB2B,WAiB3B,GAAA,IAAA,CAjB2B,WAiB3B;AAAA,MAjB2B,qBAiB3B,GAAA,IAAA,CAjB2B,qBAiB3B;AAAA,MAjB2B,eAiB3B,GAAA,IAAA,CAjB2B,eAiB3B;AAAA,sBAAA,IAAA,CAXRC,QAWQ;AAAA,MAXRA,QAWQ,8BAjB2B,IAiB3B;AAAA,MAjB2B,gBAiB3B,GAAA,IAAA,CAjB2B,gBAiB3B;AAAA,MAjB2B,uBAiB3B,GAAA,IAAA,CAjB2B,uBAiB3B;AAAA,MAjB2B,iBAiB3B,GAAA,IAAA,CAjB2B,iBAiB3B;AAAA,8BAAA,IAAA,CAPRC,mBAOQ;AAAA,MAPRA,mBAOQ,sCAjB2B,KAiB3B;AAAA,MAjB2B,aAiB3B,GAAA,IAAA,CAjB2B,aAiB3B;AAAA,MAjB2B,UAiB3B,GAAA,IAAA,CAjB2B,UAiB3B;AAAA,MAjB2B,QAiB3B,GAAA,IAAA,CAjB2B,QAiB3B;AAAA,MAjB2B,SAiB3B,GAAA,IAAA,CAjB2B,SAiB3B;AAAA,MAjB2B,KAiB3B,GAAA,IAAA,CAjB2B,KAiB3B;AAAA,MADRC,QACQ,GAAA,IAAA,CADRA,QACQ;;AAAA,kBACWE,QAAnB,EADQ;AAAA,MACAD,MADA,aACAA,MADA;;AAAA,wBAG4BE,KAAK,CAALA,QAAAA,CAAeC,UAAU,CAAVA,GAAAA,CAAnD,QAAmDA,CAAfD,CAH5B;AAAA;AAAA,MAGF,UAHE;AAAA,MAGF,aAHE;;AAAA,yBAIoB,KAAK,CAAL,QAAA,CAAe;AACzCE,IAAAA,MAAM,EADmC,CAAA;AAEzCC,IAAAA,KAAK,EAAEC,UAAU,CAACD;AAFuB,GAAf,CAJpB;AAAA;AAAA,MAIF,MAJE;AAAA,MAIF,SAJE;;AAAA,yBAQkCH,KAAK,CAALA,QAAAA,CAA1C,KAA0CA,CARlC;AAAA;AAAA,MAQF,aARE;AAAA,MAQF,gBARE;;AAAA,yBAUUA,KAAK,CAALA,QAAAA,CAAe;AAAA,WAAM,IAAIK,QAAQ,CAAZ,KAAA,CAAvC,CAAuC,CAAN;AAAA,GAAfL,CAVV;AAAA;AAAA,MAUF,OAVE;;AAAA,MAYAM,MAZA,GAYR,KAZQ,CAYAA,MAZA;AAcRN,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAA,aAAA,EAAmB;AACjBK,MAAAA,QAAQ,CAARA,MAAAA,CAAAA,OAAAA,EAAyB;AACvBE,QAAAA,OAAO,EADgB,CAAA;AAEvBC,QAAAA,QAAQ,EAFe,GAAA;AAGvBf,QAAAA,eAAAA,EAAAA;AAHuB,OAAzBY,EAAAA,KAAAA;AAKD;AAPHL,GAAAA,EAQG,CAAA,aAAA,EARHA,OAQG,CARHA;AAUAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMS,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAA,KAAA,EAAwC;AAAA,UAArCC,MAAqC,GAAA,KAAA,CAArCA,MAAqC;AACtEC,MAAAA,aAAa,CAAbA,MAAa,CAAbA;AADF,KAAA;;AAIA,QAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,aAAMC,gBAAgB,CAAjD,IAAiD,CAAtB;AAAA,KAA3B;;AAEA,QAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,aACzB,QAAQ,CAAR,MAAA,CAAA,OAAA,EAAyB;AACvBP,QAAAA,OAAO,EADgB,CAAA;AAEvBC,QAAAA,QAAQ,EAFe,GAAA;AAGvBf,QAAAA,eAAAA,EAAAA;AAHuB,OAAzB,EAAA,KAAA,CAIS,UAAA,KAAA,EAAkB;AAAA,YAAfsB,QAAe,GAAA,KAAA,CAAfA,QAAe;;AACzB,YAAA,QAAA,EAAc;AACZF,UAAAA,gBAAgB,CAAhBA,KAAgB,CAAhBA;AACD;AARL,OACE,CADyB;AAAA,KAA3B;;AAWAZ,IAAAA,UAAU,CAAVA,gBAAAA,CAAAA,QAAAA,EAAAA,uBAAAA;;AAEA,QAAIP,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;AACzBsB,MAAAA,QAAQ,CAARA,WAAAA,CAAAA,kBAAAA,EAAAA,kBAAAA;AACAA,MAAAA,QAAQ,CAARA,WAAAA,CAAAA,kBAAAA,EAAAA,kBAAAA;AAFF,KAAA,MAGO;AACLA,MAAAA,QAAQ,CAARA,WAAAA,CAAAA,iBAAAA,EAAAA,kBAAAA;AACAA,MAAAA,QAAQ,CAARA,WAAAA,CAAAA,iBAAAA,EAAAA,kBAAAA;AACD;;AAED,WAAO,YAAM;AACXf,MAAAA,UAAU,CAAVA,mBAAAA,CAAAA,QAAAA,EAAAA,uBAAAA;;AAEA,UAAIP,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;AACzBsB,QAAAA,QAAQ,CAARA,cAAAA,CAAAA,kBAAAA,EAAAA,kBAAAA;AACAA,QAAAA,QAAQ,CAARA,cAAAA,CAAAA,kBAAAA,EAAAA,kBAAAA;AAFF,OAAA,MAGO;AACLA,QAAAA,QAAQ,CAARA,cAAAA,CAAAA,iBAAAA,EAAAA,kBAAAA;AACAA,QAAAA,QAAQ,CAARA,cAAAA,CAAAA,iBAAAA,EAAAA,kBAAAA;AACD;AATH,KAAA;AA5BFhB,GAAAA,EAuCG,CAvCHA,OAuCG,CAvCHA;;AAyCA,MAAMiB,YAAY,GAAIC,SAAhBD,YAAgBC,CAAAA,CAAD,EAA0B;AAAA,gCACnBA,CAAC,CAADA,WAAAA,CAA1B,MAD6C;AAAA,QACvC,MADuC,yBACvC,MADuC;AAAA,QAC7Bf,KAD6B,yBAC7BA,KAD6B;AAG7CgB,IAAAA,SAAS,CAACC,UAAAA,MAAM,EAAI;AAClB,UAAIlB,MAAM,KAAKkB,MAAM,CAAjBlB,MAAAA,IAA4BC,KAAK,KAAKiB,MAAM,CAAhD,KAAA,EAAwD;AACtD,eAAA,MAAA;AADF,OAAA,MAEO;AACL,eAAO;AACLlB,UAAAA,MADK,EACLA,MADK;AAELC,UAAAA,KAAAA,EAAAA;AAFK,SAAP;AAID;AARHgB,KAAS,CAATA;AAHF,GAAA;;AAeA,MAAME,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAM;AACtC,QAAA,aAAA,EAAmB;AACjB,aAAOC,aAAa,KAApB,aAAA;AACD;;AAED,QAAI,CAAJ,QAAA,EAAe;AACb,aAAA,KAAA;AACD;;AAED,QAAIF,MAAM,CAANA,KAAAA,IAAJ,GAAA,EAAyB;AAEvB,UAAIG,eAAe,GAAnB,0BAAA;AAEA,UAAMC,cAAc,GAAGC,UAAU,CAAVA,OAAAA,CAAvB,QAAuBA,CAAvB;;AAEA,UAAA,cAAA,EAAoB;AAClB,YAAI,OAAOD,cAAc,CAArB,KAAA,KAAJ,QAAA,EAA8C;AAC5CD,UAAAA,eAAe,GAAGC,cAAc,CAAhCD,KAAAA;AADF,SAAA,MAEO,IAAI,OAAOC,cAAc,CAArB,QAAA,KAAJ,QAAA,EAAiD;AACtDD,UAAAA,eAAe,GAAGC,cAAc,CAAhCD,QAAAA;AACD;AACF;;AAED,aAAOjB,MAAM,CAANA,MAAAA,GAAAA,eAAAA,IAAmCc,MAAM,CAAhD,KAAA;AAdF,KAAA,MAeO;AACL,UAAMM,WAAW,GAAGtB,UAAU,CAAVA,KAAAA,GAAmBA,UAAU,CAAjD,MAAA;AAEA,aAAA,WAAA;AACD;AA5BH,GAAA;;AA+BA,SACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,IAAA,EACGuB,UAAAA,MAAM;AAAA,WACL,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACE,MAAA,KAAK,EAAE,CACLC,MAAM,CADD,MAAA,EAEL;AACEC,QAAAA,eAAe,EAAE/B,MAAM,CADzB,IAAA;AAEEgC,QAAAA,cAAc,EAAEhC,MAAM,CAACiC;AAFzB,OAFK,EAMLnC,mBAAmB,GACf;AAEEoC,QAAAA,SAAS,EAAE,CACT;AACEC,UAAAA,UAAU,EAAE,OAAO,CAAP,WAAA,CAAoB;AAC9BC,YAAAA,UAAU,EAAE,CAAA,CAAA,EADkB,CAClB,CADkB;AAE9BC,YAAAA,WAAW,EAAE,CAACf,MAAM,CAAP,MAAA,EAAA,CAAA;AAFiB,WAApB;AADd,SADS,CAFb;AAYEgB,QAAAA,QAAQ,EAAEC,aAAa,GAAA,UAAA,GAAgB;AAZzC,OADe,GANd,IAAA,EAsBL;AACEnC,QAAAA,MAAM,EAAEX,qBAAqB,IAAIoC,MAAM,GAAGA,MAAM,CAAT,MAAA,GADzC,CAC+B,CAD/B;AAEEW,QAAAA,aAAa,EAAEX,MAAM,GAAGA,MAAM,CAAT,MAAA,GAAmB;AAF1C,OAtBK,EADT,KACS,CADT;AA6BE,MAAA,aAAa,EAAE/B,mBAAmB,IAAnBA,aAAAA,GAAAA,MAAAA,GAAgD;AA7BjE,KAAA,EA+BE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAEgC,MAAM,CAAnB,OAAA;AAA6B,MAAA,QAAQ,EAAEX;AAAvC,KAAA,EACG,MAAM,CAAN,GAAA,CAAW,UAAA,KAAA,EAAA,KAAA,EAAkB;AAC5B,UAAMsB,OAAO,GAAGC,KAAK,KAAKC,KAAK,CAA/B,KAAA;AAD4B,UAEpBC,OAFoB,GAERC,WAAW,CAACC,KAAK,CAArC,GAA+B,CAFH,CAEpBF,OAFoB;;AAI5B,UAAMG,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,YAAMC,KAAK,GAAG,UAAU,CAAV,IAAA,CAAgB;AAC5BC,UAAAA,IAAI,EADwB,UAAA;AAE5BC,UAAAA,MAAM,EAAEJ,KAAK,CAFe,GAAA;AAG5BK,UAAAA,iBAAiB,EAAE;AAHS,SAAhB,CAAd;;AAMA,YAAI,CAAA,OAAA,IAAY,CAACH,KAAK,CAAtB,gBAAA,EAAyC;AACvCI,UAAAA,UAAU,CAAVA,QAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACKC,aAAa,CAAbA,QAAAA,CAAuBP,KAAK,CADjCM,IACKC,CADLD,EAAAA;AAEEF,YAAAA,MAAM,EAAEP,KAAK,CAACW;AAFhBF,WAAAA,CAAAA;AAID;AAZH,OAAA;;AAeA,UAAMG,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBH,QAAAA,UAAU,CAAVA,IAAAA,CAAgB;AACdH,UAAAA,IAAI,EADU,cAAA;AAEdC,UAAAA,MAAM,EAAEJ,KAAK,CAACQ;AAFA,SAAhBF;AADF,OAAA;;AAOA,UAAMI,KAAK,GACTZ,OAAO,CAAPA,WAAAA,KAAAA,SAAAA,GACIA,OAAO,CADXA,WAAAA,GAEIA,OAAO,CAAPA,KAAAA,KAAAA,SAAAA,GACAA,OAAO,CADPA,KAAAA,GAEAE,KAAK,CALX,IAAA;AAOA,UAAMW,kBAAkB,GACtBb,OAAO,CAAPA,wBAAAA,KAAAA,SAAAA,GACIA,OAAO,CADXA,wBAAAA,GAEI,OAAA,KAAA,KAAA,QAAA,GAAA,GAAA,MAAA,CAAA,KAAA,EAAA,SAAA,EAAA,MAAA,CACkBF,KAAK,GADvB,CAAA,EAAA,MAAA,EAAA,MAAA,CACkClC,MAAM,CADxC,MAAA,CAAA,GAHN,SAAA;AAOA,aACE,KAAA,CAAA,aAAA,CAAC,iBAAD,CAAA,QAAA,EAAA;AACE,QAAA,GAAG,EAAEsC,KAAK,CADZ,GAAA;AAEE,QAAA,KAAK,EAAED,WAAW,CAACC,KAAK,CAAjBD,GAAW,CAAXA,CAAuBO;AAFhC,OAAA,EAIE,KAAA,CAAA,aAAA,CAAC,sBAAD,CAAA,QAAA,EAAA;AAAiC,QAAA,KAAK,EAAEN;AAAxC,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AACE,QAAA,KAAK,EADP,KAAA;AAEE,QAAA,OAAO,EAFT,OAAA;AAGE,QAAA,UAAU,EAAEvB,yBAHd,EAAA;AAIE,QAAA,OAAO,EAJT,OAAA;AAKE,QAAA,WAAW,EALb,WAAA;AAME,QAAA,kBAAkB,EANpB,kBAAA;AAOE,QAAA,MAAM,EAAEqB,OAAO,CAPjB,YAAA;AAQE,QAAA,gBAAgB,EARlB,gBAAA;AASE,QAAA,eAAe,EATjB,eAAA;AAUE,QAAA,iBAAiB,EAVnB,iBAAA;AAWE,QAAA,qBAAqB,EAXvB,qBAAA;AAYE,QAAA,uBAAuB,EAZzB,uBAAA;AAaE,QAAA,MAAM,EAAEA,OAAO,CAbjB,YAAA;AAcE,QAAA,IAAI,EAAEA,OAAO,CAdf,UAAA;AAeE,QAAA,KAAK,EAfP,KAAA;AAgBE,QAAA,QAAQ,EAhBV,QAAA;AAiBE,QAAA,SAAS,EAjBX,SAAA;AAkBE,QAAA,UAAU,EAlBZ,UAAA;AAmBE,QAAA,KAAK,EAAE7C;AAnBT,OAAA,CADF,CAJF,CADF;AA3EZ,KAmCW,CADH,CA/BF,CADK;AAAA,GADT,CADF;AA+GD;AAED,IAAM+B,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/B4B,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EADE,CAAA;AAENC,IAAAA,KAAK,EAFC,CAAA;AAGNC,IAAAA,MAAM,EAHA,CAAA;AAINC,IAAAA,cAAc,EAAEnC,UAAU,CAJpB,aAAA;AAKNoC,IAAAA,SAAS,EAAE;AALL,GADuB;AAQ/BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EADG,CAAA;AAEPC,IAAAA,aAAa,EAAE;AAFR;AARsB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Animated,\n  StyleSheet,\n  Keyboard,\n  Platform,\n  LayoutChangeEvent,\n  ScaledSize,\n  Dimensions,\n} from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  CommonActions,\n  useTheme,\n} from '@react-navigation/native';\nimport { SafeAreaConsumer } from 'react-native-safe-area-context';\n\nimport BottomTabItem from './BottomTabItem';\nimport { BottomTabBarProps } from '../types';\n\ntype Props = BottomTabBarProps & {\n  activeTintColor?: string;\n  inactiveTintColor?: string;\n};\n\nconst DEFAULT_TABBAR_HEIGHT = 50;\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default function BottomTabBar({\n  state,\n  navigation,\n  descriptors,\n  activeBackgroundColor,\n  activeTintColor,\n  adaptive = true,\n  allowFontScaling,\n  inactiveBackgroundColor,\n  inactiveTintColor,\n  keyboardHidesTabBar = false,\n  labelPosition,\n  labelStyle,\n  showIcon,\n  showLabel,\n  style,\n  tabStyle,\n}: Props) {\n  const { colors } = useTheme();\n\n  const [dimensions, setDimensions] = React.useState(Dimensions.get('window'));\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    width: dimensions.width,\n  });\n  const [keyboardShown, setKeyboardShown] = React.useState(false);\n\n  const [visible] = React.useState(() => new Animated.Value(1));\n\n  const { routes } = state;\n\n  React.useEffect(() => {\n    if (keyboardShown) {\n      Animated.timing(visible, {\n        toValue: 0,\n        duration: 200,\n        useNativeDriver,\n      }).start();\n    }\n  }, [keyboardShown, visible]);\n\n  React.useEffect(() => {\n    const handleOrientationChange = ({ window }: { window: ScaledSize }) => {\n      setDimensions(window);\n    };\n\n    const handleKeyboardShow = () => setKeyboardShown(true);\n\n    const handleKeyboardHide = () =>\n      Animated.timing(visible, {\n        toValue: 1,\n        duration: 250,\n        useNativeDriver,\n      }).start(({ finished }) => {\n        if (finished) {\n          setKeyboardShown(false);\n        }\n      });\n\n    Dimensions.addEventListener('change', handleOrientationChange);\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return () => {\n      Dimensions.removeEventListener('change', handleOrientationChange);\n\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, [visible]);\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout(layout => {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height,\n          width,\n        };\n      }\n    });\n  };\n\n  const shouldUseHorizontalLabels = () => {\n    if (labelPosition) {\n      return labelPosition === 'beside-icon';\n    }\n\n    if (!adaptive) {\n      return false;\n    }\n\n    if (layout.width >= 768) {\n      // Screen size matches a tablet\n      let maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n\n      const flattenedStyle = StyleSheet.flatten(tabStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          maxTabItemWidth = flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          maxTabItemWidth = flattenedStyle.maxWidth;\n        }\n      }\n\n      return routes.length * maxTabItemWidth <= layout.width;\n    } else {\n      const isLandscape = dimensions.width > dimensions.height;\n\n      return isLandscape;\n    }\n  };\n\n  return (\n    <SafeAreaConsumer>\n      {insets => (\n        <Animated.View\n          style={[\n            styles.tabBar,\n            {\n              backgroundColor: colors.card,\n              borderTopColor: colors.border,\n            },\n            keyboardHidesTabBar\n              ? {\n                  // When the keyboard is shown, slide down the tab bar\n                  transform: [\n                    {\n                      translateY: visible.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layout.height, 0],\n                      }),\n                    },\n                  ],\n                  // Absolutely position the tab bar so that the content is below it\n                  // This is needed to avoid gap at bottom when the tab bar is hidden\n                  position: keyboardShown ? 'absolute' : null,\n                }\n              : null,\n            {\n              height: DEFAULT_TABBAR_HEIGHT + (insets ? insets.bottom : 0),\n              paddingBottom: insets ? insets.bottom : 0,\n            },\n            style,\n          ]}\n          pointerEvents={keyboardHidesTabBar && keyboardShown ? 'none' : 'auto'}\n        >\n          <View style={styles.content} onLayout={handleLayout}>\n            {routes.map((route, index) => {\n              const focused = index === state.index;\n              const { options } = descriptors[route.key];\n\n              const onPress = () => {\n                const event = navigation.emit({\n                  type: 'tabPress',\n                  target: route.key,\n                  canPreventDefault: true,\n                });\n\n                if (!focused && !event.defaultPrevented) {\n                  navigation.dispatch({\n                    ...CommonActions.navigate(route.name),\n                    target: state.key,\n                  });\n                }\n              };\n\n              const onLongPress = () => {\n                navigation.emit({\n                  type: 'tabLongPress',\n                  target: route.key,\n                });\n              };\n\n              const label =\n                options.tabBarLabel !== undefined\n                  ? options.tabBarLabel\n                  : options.title !== undefined\n                  ? options.title\n                  : route.name;\n\n              const accessibilityLabel =\n                options.tabBarAccessibilityLabel !== undefined\n                  ? options.tabBarAccessibilityLabel\n                  : typeof label === 'string'\n                  ? `${label}, tab, ${index + 1} of ${routes.length}`\n                  : undefined;\n\n              return (\n                <NavigationContext.Provider\n                  key={route.key}\n                  value={descriptors[route.key].navigation}\n                >\n                  <NavigationRouteContext.Provider value={route}>\n                    <BottomTabItem\n                      route={route}\n                      focused={focused}\n                      horizontal={shouldUseHorizontalLabels()}\n                      onPress={onPress}\n                      onLongPress={onLongPress}\n                      accessibilityLabel={accessibilityLabel}\n                      testID={options.tabBarTestID}\n                      allowFontScaling={allowFontScaling}\n                      activeTintColor={activeTintColor}\n                      inactiveTintColor={inactiveTintColor}\n                      activeBackgroundColor={activeBackgroundColor}\n                      inactiveBackgroundColor={inactiveBackgroundColor}\n                      button={options.tabBarButton}\n                      icon={options.tabBarIcon}\n                      label={label}\n                      showIcon={showIcon}\n                      showLabel={showLabel}\n                      labelStyle={labelStyle}\n                      style={tabStyle}\n                    />\n                  </NavigationRouteContext.Provider>\n                </NavigationContext.Provider>\n              );\n            })}\n          </View>\n        </Animated.View>\n      )}\n    </SafeAreaConsumer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}