{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"F:\\\\MobileProjects\\\\ovuli\\\\node_modules\\\\react-native-wheel-picker-android\\\\src\\\\TimePicker.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport WheelPicker from \"./WheelPicker\";\nimport { hourTo24Format, hourTo12Format, getHoursArray, getFiveMinutesArray, getAmArray } from \"./Utils\";\nvar AM = 'AM';\nvar HOUR = 60;\n\nvar TimePicker = function (_React$Component) {\n  _inherits(TimePicker, _React$Component);\n\n  function TimePicker(props) {\n    var _this;\n\n    _classCallCheck(this, TimePicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimePicker).call(this, props));\n\n    _this.onHourSelected = function (position) {\n      _this.setState({\n        selectedHourIndex: position\n      });\n\n      var _this$state = _this.state,\n          selectedDate = _this$state.selectedDate,\n          hours = _this$state.hours;\n      var selectedHour = hours[position];\n\n      if (_this.props.format24) {\n        selectedDate.setHours(Number(selectedHour));\n      } else {\n        var time12format = hourTo12Format(selectedDate.getHours());\n        var newTime12Format = selectedHour + \" \" + time12format[1];\n        var selectedHour24format = hourTo24Format(newTime12Format);\n        selectedDate.setHours(selectedHour24format);\n      }\n\n      _this.onTimeSelected(selectedDate);\n    };\n\n    _this.onMinuteSelected = function (position) {\n      _this.setState({\n        selectedMinuteIndex: position\n      });\n\n      var selectedDate = _this.state.selectedDate;\n      selectedDate.setMinutes(Number(_this.state.minutes[position]));\n\n      _this.onTimeSelected(selectedDate);\n    };\n\n    _this.onAmSelected = function (position) {\n      _this.setState({\n        selectedAmIndex: position\n      });\n\n      var selectedDate = _this.state.selectedDate;\n      var time12format = hourTo12Format(selectedDate.getHours());\n      var newTime12Format = time12format[0] + \" \" + getAmArray()[position];\n      var selectedHour24format = hourTo24Format(newTime12Format);\n      selectedDate.setHours(selectedHour24format);\n\n      _this.onTimeSelected(selectedDate);\n    };\n\n    var initDate = props.initDate,\n        format24 = props.format24,\n        minutes = props.minutes;\n\n    var _selectedDate = initDate ? new Date(initDate) : new Date();\n\n    var _time12format = hourTo12Format(_selectedDate.getHours());\n\n    var time24format = _selectedDate.getHours();\n\n    var _hours = _this.props.hours || getHoursArray(format24);\n\n    var selectedHourIndex = format24 ? time24format : Number(_time12format[0]) - 1;\n    var minutesCount = minutes ? minutes.length : 12;\n    var selectedMinuteIndex = Math.round(_selectedDate.getMinutes() / (HOUR / minutesCount));\n    var selectedAmIndex = _time12format[1] === AM ? 0 : 1;\n    _this.state = {\n      selectedDate: _selectedDate,\n      hours: _hours,\n      minutes: minutes || getFiveMinutesArray(),\n      selectedHourIndex: selectedHourIndex,\n      selectedMinuteIndex: selectedMinuteIndex,\n      selectedAmIndex: selectedAmIndex\n    };\n    return _this;\n  }\n\n  _createClass(TimePicker, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          hours = _this$state2.hours,\n          selectedHourIndex = _this$state2.selectedHourIndex,\n          minutes = _this$state2.minutes,\n          selectedMinuteIndex = _this$state2.selectedMinuteIndex;\n      return React.createElement(View, {\n        style: [styles.container, {\n          backgroundColor: this.props.backgroundColor\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        }\n      }, React.createElement(WheelPicker, _extends({\n        isCyclic: true,\n        style: styles.wheelPicker\n      }, this.props, {\n        data: hours,\n        onItemSelected: this.onHourSelected,\n        selectedItem: selectedHourIndex,\n        initPosition: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        }\n      })), React.createElement(WheelPicker, _extends({\n        style: styles.wheelPicker,\n        isCyclic: true\n      }, this.props, {\n        data: minutes,\n        onItemSelected: this.onMinuteSelected,\n        selectedItem: selectedMinuteIndex,\n        initPosition: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        }\n      })), !this.props.format24 && this.renderAm());\n    }\n  }, {\n    key: \"renderAm\",\n    value: function renderAm() {\n      var _this$props = this.props,\n          itemTextColor = _this$props.itemTextColor,\n          selectedItemTextColor = _this$props.selectedItemTextColor;\n      var selectedAmIndex = this.state.selectedAmIndex;\n      return React.createElement(WheelPicker, _extends({\n        style: styles.wheelPicker\n      }, this.props, {\n        data: getAmArray(),\n        onItemSelected: this.onAmSelected,\n        selectedItem: selectedAmIndex,\n        initPosition: selectedAmIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        }\n      }));\n    }\n  }, {\n    key: \"onTimeSelected\",\n    value: function onTimeSelected(selectedDate) {\n      if (this.props.onTimeSelected) {\n        this.props.onTimeSelected(selectedDate);\n      }\n    }\n  }]);\n\n  return TimePicker;\n}(React.Component);\n\nexport { TimePicker as default };\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row'\n  },\n  wheelPicker: {\n    height: 150,\n    width: null,\n    flex: 1\n  }\n});","map":{"version":3,"sources":["F:/MobileProjects/ovuli/node_modules/react-native-wheel-picker-android/src/TimePicker.js"],"names":["React","WheelPicker","hourTo24Format","hourTo12Format","getHoursArray","getFiveMinutesArray","getAmArray","AM","HOUR","TimePicker","props","onHourSelected","position","setState","selectedHourIndex","state","selectedDate","hours","selectedHour","format24","setHours","Number","time12format","getHours","newTime12Format","selectedHour24format","onTimeSelected","onMinuteSelected","selectedMinuteIndex","setMinutes","minutes","onAmSelected","selectedAmIndex","initDate","Date","time24format","minutesCount","length","Math","round","getMinutes","styles","container","backgroundColor","wheelPicker","renderAm","itemTextColor","selectedItemTextColor","Component","StyleSheet","create","alignItems","flexDirection","height","width","flex"],"mappings":"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","sourcesContent":["/**\n * @prettier\n * @flow\n * */\n\nimport React from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport WheelPicker from './WheelPicker'\nimport {\n  hourTo24Format,\n  hourTo12Format,\n  getHoursArray,\n  getFiveMinutesArray,\n  getAmArray,\n} from './Utils'\n\nconst AM = 'AM'\nconst HOUR = 60\n\ntype Event = {\n  data: string | number,\n  position: number,\n}\n\ntype Props = {\n  initDate: string,\n  onTimeSelected: Date => void,\n  hours: Array<number>,\n  minutes: Array<string>,\n  format24: boolean,\n}\n\ntype State = {\n  selectedDate: Date,\n  hours: Array<number>,\n  minutes: Array<string>,\n  selectedHourIndex: number,\n  selectedMinuteIndex: number,\n  selectedAmIndex: number,\n}\n\nexport default class TimePicker extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    const { initDate, format24, minutes } = props\n    const selectedDate = initDate ? new Date(initDate) : new Date()\n    const time12format = hourTo12Format(selectedDate.getHours())\n    const time24format = selectedDate.getHours()\n    const hours = this.props.hours || getHoursArray(format24)\n    const selectedHourIndex = format24 ? time24format : Number(time12format[0]) - 1\n    const minutesCount = minutes ? minutes.length : 12\n\n    const selectedMinuteIndex = Math.round(\n      selectedDate.getMinutes() / (HOUR / minutesCount)\n    )\n    const selectedAmIndex = time12format[1] === AM ? 0 : 1\n    this.state = {\n      selectedDate,\n      hours,\n      minutes: minutes || getFiveMinutesArray(),\n      selectedHourIndex,\n      selectedMinuteIndex,\n      selectedAmIndex,\n    }\n  }\n\n  render() {\n    const { hours, selectedHourIndex, minutes, selectedMinuteIndex } = this.state\n\n    return (\n      <View style={[styles.container, { backgroundColor: this.props.backgroundColor }]}>\n        <WheelPicker\n          isCyclic\n          style={styles.wheelPicker}\n          {...this.props}\n          data={hours}\n          onItemSelected={this.onHourSelected}\n          selectedItem={selectedHourIndex}\n          initPosition={0}\n        />\n        <WheelPicker\n          style={styles.wheelPicker}\n          isCyclic\n          {...this.props}\n          data={minutes}\n          onItemSelected={this.onMinuteSelected}\n          selectedItem={selectedMinuteIndex}\n          initPosition={0}\n        />\n        {!this.props.format24 && this.renderAm()}\n      </View>\n    )\n  }\n\n  renderAm() {\n    const { itemTextColor, selectedItemTextColor } = this.props\n    const { selectedAmIndex } = this.state\n    return (\n      <WheelPicker\n        style={styles.wheelPicker}\n        {...this.props}\n        data={getAmArray()}\n        onItemSelected={this.onAmSelected}\n        selectedItem={selectedAmIndex}\n        initPosition={selectedAmIndex}\n      />\n    )\n  }\n\n  onHourSelected = (position: number) => {\n    this.setState({selectedHourIndex: position})\n    const { selectedDate, hours } = this.state\n    const selectedHour = hours[position]\n\n    if (this.props.format24) {\n      selectedDate.setHours(Number(selectedHour))\n    } else {\n      const time12format = hourTo12Format(selectedDate.getHours())\n      const newTime12Format = `${selectedHour} ${time12format[1]}`\n      const selectedHour24format = hourTo24Format(newTime12Format)\n      selectedDate.setHours(selectedHour24format)\n    }\n    this.onTimeSelected(selectedDate)\n  }\n\n  onMinuteSelected = (position: number) => {\n    this.setState({selectedMinuteIndex: position})\n    const selectedDate = this.state.selectedDate\n    selectedDate.setMinutes(Number(this.state.minutes[position]))\n    this.onTimeSelected(selectedDate)\n  }\n\n  onAmSelected = (position: number) => {\n    this.setState({selectedAmIndex: position})\n    const selectedDate = this.state.selectedDate\n    const time12format = hourTo12Format(selectedDate.getHours())\n    const newTime12Format = `${time12format[0]} ${getAmArray()[position]}`\n    const selectedHour24format = hourTo24Format(newTime12Format)\n    selectedDate.setHours(selectedHour24format)\n    this.onTimeSelected(selectedDate)\n  }\n\n  onTimeSelected(selectedDate: Date) {\n    if (this.props.onTimeSelected) {\n      this.props.onTimeSelected(selectedDate)\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n  wheelPicker: {\n    height: 150,\n    width: null,\n    flex: 1,\n  },\n})\n\n"]},"metadata":{},"sourceType":"module"}