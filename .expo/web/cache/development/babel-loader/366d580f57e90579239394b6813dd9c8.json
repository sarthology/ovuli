{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"F:\\\\MobileProjects\\\\ovuli\\\\src\\\\screens\\\\ProfileScreen\\\\LanguageScreen.js\";\nimport 'react-native-gesture-handler';\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { AntDesign } from '@expo/vector-icons';\nimport { WheelPicker } from 'react-native-wheel-picker-android';\nimport top from \"../../../wireframes/assets/Lang_Screen/top.png\";\nimport bottom from \"../../../wireframes/assets/Lang_Screen/bottom.png\";\nimport * as Font from 'expo-font';\nvar wheelPickerData = ['Assamese', 'Bengali', 'Bodo', 'English', 'Dogri', 'Gujarati', 'Hindi', 'Kannada', 'Kashmiri', 'Konkani', 'Maithili', 'Malayalam', 'Manipuri', 'Marathi', 'Nepali', 'Oriya', 'Punjabi', 'Sanskrit', 'Santhali', 'Sindhi', 'Tamil', 'Telugu', 'Urdu'];\n\nvar LanguageScreen = function (_Component) {\n  _inherits(LanguageScreen, _Component);\n\n  function LanguageScreen() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LanguageScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LanguageScreen)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedItem: 0,\n      fontLoaded: false\n    };\n\n    _this.saveSelectedItem = function _callee() {\n      var selectedLanguage;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              selectedLanguage = wheelPickerData[_this.state.selectedItem];\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('useLanguage', selectedLanguage));\n\n            case 4:\n              _this.props.navigation.navigate('Name');\n\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 7]]);\n    };\n\n    _this.onItemSelected = function (selectedItem) {\n      _this.setState({\n        selectedItem: selectedItem\n      });\n    };\n\n    _this.saveselectedItem = function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('language', _this.state.selectedItem));\n\n            case 3:\n              _context2.next = 8;\n              break;\n\n            case 5:\n              _context2.prev = 5;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n            case 8:\n              _this.props.navigation.navigate('Name');\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 5]]);\n    };\n\n    return _this;\n  }\n\n  _createClass(LanguageScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                'PT-Sans': require(\"../../../wireframes/assets/fonts/PTC55F.ttf\")\n              }));\n\n            case 2:\n              this.setState({\n                fontLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        }\n      }, this.state.fontLoaded ? React.createElement(React.Fragment, null, React.createElement(Image, {\n        source: top,\n        style: styles.top,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        }\n      }), React.createElement(View, {\n        style: styles.cycleText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        }\n      }, React.createElement(Text, {\n        style: [{\n          fontFamily: 'PT-Sans',\n          fontSize: 30,\n          fontWeight: 'bold',\n          alignSelf: 'center'\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        }\n      }, \"please\"), React.createElement(Text, {\n        style: {\n          fontSize: 25,\n          fontFamily: 'PT-Sans',\n          marginTop: 8,\n          alignSelf: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        }\n      }, ' ', \"select your\", ' ')), React.createElement(Text, {\n        style: {\n          fontSize: 25,\n          fontFamily: 'PT-Sans',\n          alignSelf: 'center',\n          marginBottom: 25\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        }\n      }, \"language?\"), React.createElement(WheelPicker, {\n        selectedItem: this.state.selectedItem,\n        data: wheelPickerData,\n        onItemSelected: this.onItemSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        }\n      }), React.createElement(Image, {\n        source: please_select_your_language,\n        style: styles.cycleText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        }\n      }), React.createElement(View, {\n        style: styles.wheelPicker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        }\n      }, React.createElement(WheelPicker, {\n        selectedItem: this.state.selectedItem,\n        data: wheelPickerData,\n        onItemSelected: this.onItemSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        }\n      })), React.createElement(Image, {\n        source: bottom,\n        style: styles.bottom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        }\n      }), React.createElement(TouchableOpacity, {\n        style: styles.button,\n        onPress: this.saveSelectedItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        }\n      }, React.createElement(Text, {\n        style: styles.buttonText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        }\n      }, \"Continue\"), React.createElement(AntDesign, {\n        style: {\n          alignSelf: 'center',\n          color: '#F55963'\n        },\n        name: \"arrowright\",\n        size: 18,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        }\n      })), ' ') : null);\n    }\n  }]);\n\n  return LanguageScreen;\n}(Component);\n\nexport { LanguageScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#fff',\n    flex: 1,\n    width: '100%',\n    height: '100%'\n  },\n  top: {\n    alignSelf: 'flex-end',\n    height: Dimensions.get('window').height / 7,\n    width: Dimensions.get('window').width / 2\n  },\n  bottom: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0\n  },\n  cycleText: {\n    alignSelf: 'center',\n    marginTop: Dimensions.get('window').height / 3 - 150,\n    marginBottom: 20,\n    flexDirection: 'row',\n    justifyContent: 'center'\n  },\n  button: {\n    borderWidth: 2,\n    width: 120,\n    borderRadius: 5,\n    marginTop: -25,\n    borderColor: '#F55963',\n    position: 'absolute',\n    right: 30,\n    top: Dimensions.get('window').height - 50,\n    flex: 1,\n    flexDirection: 'row'\n  },\n  buttonText: {\n    fontSize: 20,\n    textAlign: 'center',\n    padding: 5,\n    paddingLeft: 10,\n    color: '#F55963'\n  },\n  wheelPicker: {\n    width: '100%',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["F:/MobileProjects/ovuli/src/screens/ProfileScreen/LanguageScreen.js"],"names":["React","Component","AntDesign","WheelPicker","top","bottom","Font","wheelPickerData","LanguageScreen","state","selectedItem","fontLoaded","saveSelectedItem","selectedLanguage","AsyncStorage","setItem","props","navigation","navigate","console","log","onItemSelected","setState","saveselectedItem","loadAsync","require","styles","container","cycleText","fontFamily","fontSize","fontWeight","alignSelf","marginTop","marginBottom","please_select_your_language","wheelPicker","button","buttonText","color","StyleSheet","create","backgroundColor","flex","width","height","Dimensions","get","position","left","flexDirection","justifyContent","borderWidth","borderRadius","borderColor","right","textAlign","padding","paddingLeft","alignItems"],"mappings":"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","sourcesContent":["import 'react-native-gesture-handler';\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  Text,\r\n  Dimensions,\r\n  Image,\r\n  TouchableOpacity,\r\n  AsyncStorage,\r\n} from 'react-native';\r\nimport { AntDesign } from '@expo/vector-icons';\r\nimport { WheelPicker } from 'react-native-wheel-picker-android';\r\n\r\nimport top from '../../../wireframes/assets/Lang_Screen/top.png';\r\nimport bottom from '../../../wireframes/assets/Lang_Screen/bottom.png';\r\nimport * as Font from 'expo-font';\r\n\r\nconst wheelPickerData = [\r\n  'Assamese',\r\n  'Bengali',\r\n  'Bodo',\r\n  'English',\r\n  'Dogri',\r\n  'Gujarati',\r\n  'Hindi',\r\n  'Kannada',\r\n  'Kashmiri',\r\n  'Konkani',\r\n  'Maithili',\r\n  'Malayalam',\r\n  'Manipuri',\r\n  'Marathi',\r\n  'Nepali',\r\n  'Oriya',\r\n  'Punjabi',\r\n  'Sanskrit',\r\n  'Santhali',\r\n  'Sindhi',\r\n  'Tamil',\r\n  'Telugu',\r\n  'Urdu',\r\n];\r\n\r\nexport default class LanguageScreen extends Component {\r\n  state = { selectedItem: 0, fontLoaded: false };\r\n\r\n  async componentDidMount() {\r\n    await Font.loadAsync({\r\n      'PT-Sans': require('../../../wireframes/assets/fonts/PTC55F.ttf'),\r\n    });\r\n    this.setState({ fontLoaded: true });\r\n  }\r\n\r\n  saveSelectedItem = async () => {\r\n    let selectedLanguage = wheelPickerData[this.state.selectedItem];\r\n\r\n    try {\r\n      await AsyncStorage.setItem('useLanguage', selectedLanguage);\r\n      this.props.navigation.navigate('Name');\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  onItemSelected = selectedItem => {\r\n    this.setState({ selectedItem });\r\n  };\r\n  saveselectedItem = async () => {\r\n    // Saving the Name in Asyncstorage\r\n    try {\r\n      await AsyncStorage.setItem('language', this.state.selectedItem);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n\r\n    // Navigating to the next screen\r\n    this.props.navigation.navigate('Name');\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        {this.state.fontLoaded ? (\r\n          <>\r\n            <Image source={top} style={styles.top} />\r\n            <View style={styles.cycleText}>\r\n              <Text\r\n                style={[\r\n                  { fontFamily: 'PT-Sans', fontSize: 30, fontWeight: 'bold', alignSelf: 'center' },\r\n                ]}\r\n              >\r\n                please\r\n              </Text>\r\n              <Text\r\n                style={{ fontSize: 25, fontFamily: 'PT-Sans', marginTop: 8, alignSelf: 'center' }}\r\n              >\r\n                {' '}\r\n                select your{' '}\r\n              </Text>\r\n            </View>\r\n            <Text\r\n              style={{ fontSize: 25, fontFamily: 'PT-Sans', alignSelf: 'center', marginBottom: 25 }}\r\n            >\r\n              language?\r\n            </Text>\r\n            <WheelPicker\r\n              selectedItem={this.state.selectedItem}\r\n              data={wheelPickerData}\r\n              onItemSelected={this.onItemSelected}\r\n            />\r\n            <Image source={please_select_your_language} style={styles.cycleText} />\r\n            <View style={styles.wheelPicker}>\r\n              <WheelPicker\r\n                selectedItem={this.state.selectedItem}\r\n                data={wheelPickerData}\r\n                onItemSelected={this.onItemSelected}\r\n              />\r\n            </View>\r\n            <Image source={bottom} style={styles.bottom} />\r\n            <TouchableOpacity style={styles.button} onPress={this.saveSelectedItem}>\r\n              <Text style={styles.buttonText}>Continue</Text>\r\n              <AntDesign\r\n                style={{ alignSelf: 'center', color: '#F55963' }}\r\n                name=\"arrowright\"\r\n                size={18}\r\n              />\r\n            </TouchableOpacity>{' '}\r\n          </>\r\n        ) : null}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: '#fff',\r\n    flex: 1,\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n  top: {\r\n    alignSelf: 'flex-end',\r\n    height: Dimensions.get('window').height / 7,\r\n    width: Dimensions.get('window').width / 2,\r\n  },\r\n  bottom: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    left: 0,\r\n  },\r\n  cycleText: {\r\n    alignSelf: 'center',\r\n    marginTop: Dimensions.get('window').height / 3 - 150,\r\n    marginBottom: 20,\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n  },\r\n  button: {\r\n    borderWidth: 2,\r\n    width: 120,\r\n    borderRadius: 5,\r\n    marginTop: -25,\r\n    borderColor: '#F55963',\r\n    position: 'absolute',\r\n    right: 30,\r\n    top: Dimensions.get('window').height - 50,\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n  },\r\n  buttonText: {\r\n    fontSize: 20,\r\n    textAlign: 'center',\r\n    padding: 5,\r\n    paddingLeft: 10,\r\n    color: '#F55963',\r\n  },\r\n  wheelPicker: {\r\n    width: '100%',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}