{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport shortid from 'shortid';\nimport TabRouter, { TabActions } from \"./TabRouter\";\nexport var DrawerActions = _objectSpread({}, TabActions, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\n\nvar isDrawerOpen = function isDrawerOpen(state) {\n  var _state$history;\n\n  return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.find(function (it) {\n    return it.type === 'drawer';\n  }));\n};\n\nvar openDrawer = function openDrawer(state) {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return _objectSpread({}, state, {\n    history: [].concat(_toConsumableArray(state.history), [{\n      type: 'drawer'\n    }])\n  });\n};\n\nvar closeDrawer = function closeDrawer(state) {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return _objectSpread({}, state, {\n    history: state.history.filter(function (it) {\n      return it.type !== 'drawer';\n    })\n  });\n};\n\nexport default function DrawerRouter(options) {\n  var router = TabRouter(options);\n  return _objectSpread({}, router, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref) {\n      var routeNames = _ref.routeNames,\n          routeParamList = _ref.routeParamList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList\n      });\n      return _objectSpread({}, state, {\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\".concat(shortid())\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return _objectSpread({}, state, {\n        type: 'drawer',\n        key: \"drawer-\".concat(shortid())\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"sources":["DrawerRouter.tsx"],"names":["DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","it","history","router","TabRouter","getInitialState","routeParamList","routeNames","stale","key","shortid","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import shortid from 'shortid';\nimport { PartialState, CommonNavigationAction, Router } from './types';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions;\n\nexport type DrawerNavigationState = Omit<\n  TabNavigationState,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state: DrawerNavigationState | PartialState<DrawerNavigationState>\n) => Boolean(state.history?.find(it => it.type === 'drawer'));\n\nconst openDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer' }],\n  };\n};\n\nconst closeDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter(it => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter(\n  options: DrawerRouterOptions\n): Router<DrawerNavigationState, DrawerActionType | CommonNavigationAction> {\n  const router = (TabRouter(options) as unknown) as Router<\n    DrawerNavigationState,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const state = router.getInitialState({ routeNames, routeParamList });\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${shortid()}`,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${shortid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}