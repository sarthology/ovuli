{"ast":null,"code":"import * as React from 'react';\nimport useNavigation from \"./useNavigation\";\nexport default function useFocusEffect(effect) {\n  var navigation = useNavigation();\n  React.useEffect(function () {\n    var isFocused = false;\n    var cleanup;\n\n    var callback = function callback() {\n      var destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        var message = 'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          message += \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof destroy.then === 'function') {\n          message += \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + 'useFocusEffect(\\n' + '  React.useCallback() => {\\n' + '    async function fetchData() {\\n' + '      // You can await here\\n' + '      const response = await MyAPI.getData(someId);\\n' + '      // ...\\n' + '    }\\n\\n' + '    fetchData();\\n' + '  }, [someId])\\n' + '};\\n\\n' + 'See usage guide: https://reactnavigation.org/docs/use-focus-effect.html';\n        } else {\n          message += \" You returned: '\".concat(JSON.stringify(destroy), \"'\");\n        }\n\n        console.error(message);\n      }\n    };\n\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n    return function () {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}","map":{"version":3,"sources":["useFocusEffect.tsx"],"names":["navigation","useNavigation","React","isFocused","callback","destroy","effect","process","message","JSON","console","cleanup","unsubscribeFocus","unsubscribeBlur"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,aAAA;AAWA,eAAe,SAAA,cAAA,CAAA,MAAA,EAAgD;AAC7D,MAAMA,UAAU,GAAGC,aAAnB,EAAA;AAEAC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAIC,SAAS,GAAb,KAAA;AACA,QAAA,OAAA;;AAEA,QAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,UAAMC,OAAO,GAAGC,MAAhB,EAAA;;AAEA,UAAID,OAAO,KAAPA,SAAAA,IAAyB,OAAA,OAAA,KAA7B,UAAA,EAA4D;AAC1D,eAAA,OAAA;AACD;;AAED,UAAIE,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzC,YAAIC,OAAO,GAAX,6FAAA;;AAGA,YAAIH,OAAO,KAAX,IAAA,EAAsB;AACpBG,UAAAA,OAAO,IAAPA,kGAAAA;AADF,SAAA,MAGO,IAAI,OAAQH,OAAD,CAAP,IAAA,KAAJ,UAAA,EAAiD;AACtDG,UAAAA,OAAO,IACL,0FAAA,uDAAA,GAAA,8BAAA,GAAA,mBAAA,GAAA,8BAAA,GAAA,oCAAA,GAAA,+BAAA,GAAA,uDAAA,GAAA,gBAAA,GAAA,WAAA,GAAA,oBAAA,GAAA,kBAAA,GAAA,QAAA,GADFA,yEAAAA;AADK,SAAA,MAgBA;AACLA,UAAAA,OAAO,IAAA,mBAAA,MAAA,CAAuBC,IAAI,CAAJA,SAAAA,CAAvB,OAAuBA,CAAvB,EAAPD,GAAO,CAAPA;AACD;;AAEDE,QAAAA,OAAO,CAAPA,KAAAA,CAAAA,OAAAA;AACD;AAvCiB,KAIpB;;AAuCA,QAAIV,UAAU,CAAd,SAAIA,EAAJ,EAA4B;AAC1BW,MAAAA,OAAO,GAAGP,QAAVO,EAAAA;AACAR,MAAAA,SAAS,GAATA,IAAAA;AACD;;AAED,QAAMS,gBAAgB,GAAG,UAAU,CAAV,WAAA,CAAA,OAAA,EAAgC,YAAM;AAG7D,UAAA,SAAA,EAAe;AACb;AACD;;AAED,UAAID,OAAO,KAAX,SAAA,EAA2B;AACzBA,QAAAA,OAAO;AACR;;AAEDA,MAAAA,OAAO,GAAGP,QAAVO,EAAAA;AACAR,MAAAA,SAAS,GAATA,IAAAA;AAZF,KAAyB,CAAzB;AAeA,QAAMU,eAAe,GAAG,UAAU,CAAV,WAAA,CAAA,MAAA,EAA+B,YAAM;AAC3D,UAAIF,OAAO,KAAX,SAAA,EAA2B;AACzBA,QAAAA,OAAO;AACR;;AAEDA,MAAAA,OAAO,GAAPA,SAAAA;AACAR,MAAAA,SAAS,GAATA,KAAAA;AANF,KAAwB,CAAxB;AASA,WAAO,YAAM;AACX,UAAIQ,OAAO,KAAX,SAAA,EAA2B;AACzBA,QAAAA,OAAO;AACR;;AAEDC,MAAAA,gBAAgB;AAChBC,MAAAA,eAAe;AANjB,KAAA;AAxEFX,GAAAA,EAgFG,CAAA,MAAA,EAhFHA,UAgFG,CAhFHA;AAiFD","sourcesContent":["import * as React from 'react';\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(effect: EffectCallback) {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    const callback = () => {\n      const destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        let message =\n          'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          message +=\n            \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof (destroy as any).then === 'function') {\n          message +=\n            \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" +\n            'Instead, write the async function inside your effect ' +\n            'and call it immediately:\\n\\n' +\n            'useFocusEffect(\\n' +\n            '  React.useCallback() => {\\n' +\n            '    async function fetchData() {\\n' +\n            '      // You can await here\\n' +\n            '      const response = await MyAPI.getData(someId);\\n' +\n            '      // ...\\n' +\n            '    }\\n\\n' +\n            '    fetchData();\\n' +\n            '  }, [someId])\\n' +\n            '};\\n\\n' +\n            'See usage guide: https://reactnavigation.org/docs/use-focus-effect.html';\n        } else {\n          message += ` You returned: '${JSON.stringify(destroy)}'`;\n        }\n\n        console.error(message);\n      }\n    };\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}\n"]},"metadata":{},"sourceType":"module"}