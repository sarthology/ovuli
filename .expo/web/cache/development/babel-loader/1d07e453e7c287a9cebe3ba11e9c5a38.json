{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport SceneView from \"./SceneView\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useNavigationCache from \"./useNavigationCache\";\nexport default function useDescriptors(_ref) {\n  var state = _ref.state,\n      screens = _ref.screens,\n      navigation = _ref.navigation,\n      screenOptions = _ref.screenOptions,\n      onAction = _ref.onAction,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      addActionListener = _ref.addActionListener,\n      addFocusedListener = _ref.addFocusedListener,\n      addStateGetter = _ref.addStateGetter,\n      onRouteFocus = _ref.onRouteFocus,\n      router = _ref.router,\n      emitter = _ref.emitter;\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      options = _React$useState2[0],\n      setOptions = _React$useState2[1];\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      trackAction = _React$useContext.trackAction;\n\n  var context = React.useMemo(function () {\n    return {\n      navigation: navigation,\n      onAction: onAction,\n      addActionListener: addActionListener,\n      addFocusedListener: addFocusedListener,\n      addStateGetter: addStateGetter,\n      onRouteFocus: onRouteFocus,\n      trackAction: trackAction\n    };\n  }, [navigation, onAction, addActionListener, addFocusedListener, onRouteFocus, addStateGetter, trackAction]);\n  var navigations = useNavigationCache({\n    state: state,\n    getState: getState,\n    navigation: navigation,\n    setOptions: setOptions,\n    router: router,\n    emitter: emitter\n  });\n  return state.routes.reduce(function (acc, route) {\n    var screen = screens[route.name];\n    var navigation = navigations[route.key];\n    acc[route.key] = {\n      navigation: navigation,\n      render: function render() {\n        return React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          getState: getState,\n          setState: setState\n        }));\n      },\n      options: _objectSpread({}, typeof screenOptions === 'object' || screenOptions == null ? screenOptions : screenOptions({\n        route: route,\n        navigation: navigation\n      }), {}, typeof screen.options === 'object' || screen.options == null ? screen.options : screen.options({\n        route: route,\n        navigation: navigation\n      }), {}, options[route.key])\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["emitter","React","trackAction","context","navigation","onAction","addActionListener","addFocusedListener","addStateGetter","onRouteFocus","navigations","useNavigationCache","state","getState","setOptions","router","screen","screens","route","acc","render","setState","options","screenOptions"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  FocusedNavigationListener,\n  NavigatorStateGetter,\n} from './NavigationBuilderContext';\nimport { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addActionListener: (listener: ChildActionListener) => void;\n  addFocusedListener: (listener: FocusedNavigationListener) => void;\n  addStateGetter: (key: string, getter: NavigatorStateGetter) => void;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends object,\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addActionListener,\n  addFocusedListener,\n  addStateGetter,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { trackAction } = React.useContext(NavigationBuilderContext);\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addActionListener,\n      addFocusedListener,\n      addStateGetter,\n      onRouteFocus,\n      trackAction,\n    }),\n    [\n      navigation,\n      onAction,\n      addActionListener,\n      addFocusedListener,\n      onRouteFocus,\n      addStateGetter,\n      trackAction,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  return state.routes.reduce(\n    (acc, route) => {\n      const screen = screens[route.name];\n      const navigation = navigations[route.key];\n\n      acc[route.key] = {\n        navigation,\n        render() {\n          return (\n            <NavigationBuilderContext.Provider key={route.key} value={context}>\n              <SceneView\n                navigation={navigation}\n                route={route}\n                screen={screen}\n                getState={getState}\n                setState={setState}\n              />\n            </NavigationBuilderContext.Provider>\n          );\n        },\n        options: {\n          // The default `screenOptions` passed to the navigator\n          ...(typeof screenOptions === 'object' || screenOptions == null\n            ? screenOptions\n            : screenOptions({\n                // @ts-ignore\n                route,\n                navigation,\n              })),\n          // The `options` prop passed to `Screen` elements\n          ...(typeof screen.options === 'object' || screen.options == null\n            ? screen.options\n            : screen.options({\n                // @ts-ignore\n                route,\n                // @ts-ignore\n                navigation,\n              })),\n          // The options set via `navigation.setOptions`\n          ...options[route.key],\n        },\n      };\n\n      return acc;\n    },\n    {} as {\n      [key: string]: Descriptor<ParamListBase, string, State, ScreenOptions>;\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}