{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useTheme } from '@react-navigation/native';\nimport { ScreenContainer } from 'react-native-screens';\nimport SafeAreaProviderCompat from \"./SafeAreaProviderCompat\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport BottomTabBar from \"./BottomTabBar\";\n\nfunction SceneContent(_ref) {\n  var isFocused = _ref.isFocused,\n      children = _ref.children;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  return React.createElement(View, {\n    accessibilityElementsHidden: !isFocused,\n    importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n    style: [styles.content, {\n      backgroundColor: colors.background\n    }]\n  }, children);\n}\n\nvar BottomTabView = function (_React$Component) {\n  _inherits(BottomTabView, _React$Component);\n\n  function BottomTabView() {\n    var _this;\n\n    _classCallCheck(this, BottomTabView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BottomTabView).apply(this, arguments));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loaded: [_this.props.state.index]\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderTabBar\", function () {\n      var _this$props = _this.props,\n          _this$props$tabBar = _this$props.tabBar,\n          tabBar = _this$props$tabBar === void 0 ? function (props) {\n        return React.createElement(BottomTabBar, props);\n      } : _this$props$tabBar,\n          tabBarOptions = _this$props.tabBarOptions,\n          state = _this$props.state,\n          navigation = _this$props.navigation;\n      var descriptors = _this.props.descriptors;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarVisible === false) {\n        return null;\n      }\n\n      return tabBar(_objectSpread({}, tabBarOptions, {\n        state: state,\n        descriptors: descriptors,\n        navigation: navigation\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(BottomTabView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          state = _this$props2.state,\n          descriptors = _this$props2.descriptors,\n          lazy = _this$props2.lazy;\n      var routes = state.routes;\n      var loaded = this.state.loaded;\n      return React.createElement(SafeAreaProviderCompat, null, React.createElement(View, {\n        style: styles.container\n      }, React.createElement(ScreenContainer, {\n        style: styles.pages\n      }, routes.map(function (route, index) {\n        var descriptor = descriptors[route.key];\n        var unmountOnBlur = descriptor.options.unmountOnBlur;\n        var isFocused = state.index === index;\n\n        if (unmountOnBlur && !isFocused) {\n          return null;\n        }\n\n        if (lazy && !loaded.includes(index) && !isFocused) {\n          return null;\n        }\n\n        return React.createElement(ResourceSavingScene, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          isVisible: isFocused\n        }, React.createElement(SceneContent, {\n          isFocused: isFocused\n        }, descriptor.render()));\n      })), this.renderTabBar()));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n      };\n    }\n  }]);\n\n  return BottomTabView;\n}(React.Component);\n\nexport { BottomTabView as default };\n\n_defineProperty(BottomTabView, \"defaultProps\", {\n  lazy: true\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  },\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["BottomTabView.tsx"],"names":["children","colors","useTheme","isFocused","styles","backgroundColor","background","BottomTabView","React","lazy","index","nextProps","loaded","prevState","tabBar","props","navigation","descriptors","route","state","descriptor","options","routes","container","pages","unmountOnBlur","StyleSheet","flex","overflow","content"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\nimport { TabNavigationState, useTheme } from '@react-navigation/native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\n\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport BottomTabBar from './BottomTabBar';\nimport {\n  BottomTabNavigationConfig,\n  BottomTabDescriptorMap,\n  BottomTabNavigationHelpers,\n  BottomTabBarProps,\n} from '../types';\n\ntype Props = BottomTabNavigationConfig & {\n  state: TabNavigationState;\n  navigation: BottomTabNavigationHelpers;\n  descriptors: BottomTabDescriptorMap;\n};\n\ntype State = {\n  loaded: number[];\n};\n\nfunction SceneContent({\n  isFocused,\n  children,\n}: {\n  isFocused: boolean;\n  children: React.ReactNode;\n}) {\n  const { colors } = useTheme();\n\n  return (\n    <View\n      accessibilityElementsHidden={!isFocused}\n      importantForAccessibility={isFocused ? 'auto' : 'no-hide-descendants'}\n      style={[styles.content, { backgroundColor: colors.background }]}\n    >\n      {children}\n    </View>\n  );\n}\n\nexport default class BottomTabView extends React.Component<Props, State> {\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.state.index],\n  };\n\n  private renderTabBar = () => {\n    const {\n      tabBar = (props: BottomTabBarProps) => <BottomTabBar {...props} />,\n      tabBarOptions,\n      state,\n      navigation,\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return tabBar({\n      ...tabBarOptions,\n      state: state,\n      descriptors: descriptors,\n      navigation: navigation,\n    });\n  };\n\n  render() {\n    const { state, descriptors, lazy } = this.props;\n    const { routes } = state;\n    const { loaded } = this.state;\n\n    return (\n      <SafeAreaProviderCompat>\n        <View style={styles.container}>\n          <ScreenContainer style={styles.pages}>\n            {routes.map((route, index) => {\n              const descriptor = descriptors[route.key];\n              const { unmountOnBlur } = descriptor.options;\n              const isFocused = state.index === index;\n\n              if (unmountOnBlur && !isFocused) {\n                return null;\n              }\n\n              if (lazy && !loaded.includes(index) && !isFocused) {\n                // Don't render a screen if we've never navigated to it\n                return null;\n              }\n\n              return (\n                <ResourceSavingScene\n                  key={route.key}\n                  style={StyleSheet.absoluteFill}\n                  isVisible={isFocused}\n                >\n                  <SceneContent isFocused={isFocused}>\n                    {descriptor.render()}\n                  </SceneContent>\n                </ResourceSavingScene>\n              );\n            })}\n          </ScreenContainer>\n          {this.renderTabBar()}\n        </View>\n      </SafeAreaProviderCompat>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}