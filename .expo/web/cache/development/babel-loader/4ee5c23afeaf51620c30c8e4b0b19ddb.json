{"ast":null,"code":"import * as React from 'react';\nimport { useSubscription } from 'use-subscription';\nimport useNavigation from \"./useNavigation\";\nexport default function useIsFocused() {\n  var navigation = useNavigation();\n  var getCurrentValue = React.useCallback(navigation.isFocused, [navigation]);\n  var subscribe = React.useCallback(function (callback) {\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      return callback(true);\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      return callback(false);\n    });\n    return function () {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  return useSubscription({\n    getCurrentValue: getCurrentValue,\n    subscribe: subscribe\n  });\n}","map":{"version":3,"sources":["useIsFocused.tsx"],"names":["navigation","useNavigation","getCurrentValue","React","subscribe","callback","unsubscribeFocus","unsubscribeBlur","useSubscription"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,eAAA,QAAA,kBAAA;AACA,OAAA,aAAA;AAOA,eAAe,SAAA,YAAA,GAAiC;AAC9C,MAAMA,UAAU,GAAGC,aAAnB,EAAA;AACA,MAAMC,eAAe,GAAGC,KAAK,CAALA,WAAAA,CAAkBH,UAAU,CAA5BG,SAAAA,EAAwC,CAAhE,UAAgE,CAAxCA,CAAxB;AACA,MAAMC,SAAS,GAAG,KAAK,CAAL,WAAA,CACfC,UAAAA,QAAD,EAAwC;AACtC,QAAMC,gBAAgB,GAAGN,UAAU,CAAVA,WAAAA,CAAAA,OAAAA,EAAgC;AAAA,aACvDK,QAAQ,CADV,IACU,CAD+C;AAAA,KAAhCL,CAAzB;AAIA,QAAMO,eAAe,GAAGP,UAAU,CAAVA,WAAAA,CAAAA,MAAAA,EAA+B;AAAA,aACrDK,QAAQ,CADV,KACU,CAD6C;AAAA,KAA/BL,CAAxB;AAIA,WAAO,YAAM;AACXM,MAAAA,gBAAgB;AAChBC,MAAAA,eAAe;AAFjB,KAAA;AAVc,GAAA,EAehB,CAfF,UAeE,CAfgB,CAAlB;AAkBA,SAAOC,eAAe,CAAC;AACrBN,IAAAA,eADqB,EACrBA,eADqB;AAErBE,IAAAA,SAAAA,EAAAA;AAFqB,GAAD,CAAtB;AAID","sourcesContent":["import * as React from 'react';\nimport { useSubscription } from 'use-subscription';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n * It uses `use-subscription` under the hood for safer use in concurrent mode.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const getCurrentValue = React.useCallback(navigation.isFocused, [navigation]);\n  const subscribe = React.useCallback(\n    (callback: (value: boolean) => void) => {\n      const unsubscribeFocus = navigation.addListener('focus', () =>\n        callback(true)\n      );\n\n      const unsubscribeBlur = navigation.addListener('blur', () =>\n        callback(false)\n      );\n\n      return () => {\n        unsubscribeFocus();\n        unsubscribeBlur();\n      };\n    },\n    [navigation]\n  );\n\n  return useSubscription({\n    getCurrentValue,\n    subscribe,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}