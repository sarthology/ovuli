{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useFocusedListeners from \"./useFocusedListeners\";\nimport useDevTools from \"./useDevTools\";\nimport useStateGetters from \"./useStateGetters\";\nimport isSerializable from \"./isSerializable\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useSyncState from \"./useSyncState\";\nvar MISSING_CONTEXT_ERROR = \"Couldn't find a navigation context. Have you wrapped your app with 'NavigationContainer'? See https://reactnavigation.org/docs/getting-started.html for setup instructions.\";\nvar NOT_INITIALIZED_ERROR = \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop.html#handling-initialization for more details.\";\nexport var NavigationStateContext = React.createContext({\n  isDefault: true,\n\n  get getKey() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n\n  get setKey() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n\n  get getState() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n\n  get setState() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  }\n\n});\nvar hasWarnedForSerialization = false;\n\nvar getPartialState = function getPartialState(state) {\n  if (state === undefined) {\n    return;\n  }\n\n  var key = state.key,\n      routeNames = state.routeNames,\n      partialState = _objectWithoutProperties(state, [\"key\", \"routeNames\"]);\n\n  return _objectSpread({}, partialState, {\n    stale: true,\n    routes: state.routes.map(function (route) {\n      if (route.state === undefined) {\n        return route;\n      }\n\n      return _objectSpread({}, route, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\n\nvar BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  var initialState = _ref.initialState,\n      onStateChange = _ref.onStateChange,\n      independent = _ref.independent,\n      children = _ref.children;\n  var parent = React.useContext(NavigationStateContext);\n\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n\n  var _useSyncState = useSyncState(function () {\n    return getPartialState(initialState == null ? undefined : initialState);\n  }),\n      _useSyncState2 = _slicedToArray(_useSyncState, 3),\n      state = _useSyncState2[0],\n      getState = _useSyncState2[1],\n      setState = _useSyncState2[2];\n\n  var isFirstMountRef = React.useRef(true);\n  var skipTrackingRef = React.useRef(false);\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var reset = React.useCallback(function (state) {\n    skipTrackingRef.current = true;\n    setState(state);\n  }, [setState]);\n\n  var _useDevTools = useDevTools({\n    name: '@react-navigation',\n    reset: reset,\n    state: state\n  }),\n      trackState = _useDevTools.trackState,\n      trackAction = _useDevTools.trackAction;\n\n  var _useFocusedListeners = useFocusedListeners(),\n      listeners = _useFocusedListeners.listeners,\n      addFocusedListener = _useFocusedListeners.addListener;\n\n  var _useStateGetters = useStateGetters(),\n      getStateForRoute = _useStateGetters.getStateForRoute,\n      addStateGetter = _useStateGetters.addStateGetter;\n\n  var dispatch = function dispatch(action) {\n    if (listeners[0] == null) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n\n    listeners[0](function (navigation) {\n      return navigation.dispatch(action);\n    });\n  };\n\n  var canGoBack = function canGoBack() {\n    if (listeners[0] == null) {\n      return false;\n    }\n\n    var _listeners$ = listeners[0](function (navigation) {\n      return navigation.canGoBack();\n    }),\n        result = _listeners$.result,\n        handled = _listeners$.handled;\n\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  };\n\n  var resetRoot = React.useCallback(function (state) {\n    trackAction('@@RESET_ROOT');\n    setState(state);\n  }, [setState, trackAction]);\n  var getRootState = React.useCallback(function () {\n    return getStateForRoute('root');\n  }, [getStateForRoute]);\n  var emitter = useEventEmitter();\n  React.useImperativeHandle(ref, function () {\n    return _objectSpread({}, Object.keys(CommonActions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return dispatch(CommonActions[name].apply(CommonActions, arguments));\n      };\n\n      return acc;\n    }, {}), {}, emitter.create('root'), {\n      resetRoot: resetRoot,\n      dispatch: dispatch,\n      canGoBack: canGoBack,\n      getRootState: getRootState\n    });\n  });\n  var builderContext = React.useMemo(function () {\n    return {\n      addFocusedListener: addFocusedListener,\n      addStateGetter: addStateGetter,\n      trackAction: trackAction\n    };\n  }, [addFocusedListener, trackAction, addStateGetter]);\n  var context = React.useMemo(function () {\n    return {\n      state: state,\n      getState: getState,\n      setState: setState,\n      getKey: getKey,\n      setKey: setKey\n    };\n  }, [getKey, getState, setKey, setState, state]);\n  React.useEffect(function () {\n    if (process.env.NODE_ENV !== 'production') {\n      if (state !== undefined && !isSerializable(state) && !hasWarnedForSerialization) {\n        hasWarnedForSerialization = true;\n        console.warn(\"Non-serializable values were found in the navigation state, which can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting.html#i-get-the-warning-we-found-non-serializable-values-in-the-navigation-state for more details.\");\n      }\n    }\n\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n\n    if (skipTrackingRef.current) {\n      skipTrackingRef.current = false;\n    } else {\n      trackState(getRootState);\n    }\n\n    if (!isFirstMountRef.current && onStateChange) {\n      onStateChange(getRootState());\n    }\n\n    isFirstMountRef.current = false;\n  }, [onStateChange, trackState, getRootState, emitter, state]);\n  return React.createElement(NavigationBuilderContext.Provider, {\n    value: builderContext\n  }, React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(EnsureSingleNavigator, null, children)));\n});\nexport default BaseNavigationContainer;","map":{"version":3,"sources":["BaseNavigationContainer.tsx"],"names":["MISSING_CONTEXT_ERROR","NOT_INITIALIZED_ERROR","NavigationStateContext","isDefault","hasWarnedForSerialization","getPartialState","state","routeNames","stale","routes","route","BaseNavigationContainer","children","parent","React","useSyncState","initialState","isFirstMountRef","skipTrackingRef","navigatorKeyRef","getKey","setKey","key","reset","setState","trackAction","useDevTools","name","addListener","addFocusedListener","useFocusedListeners","addStateGetter","useStateGetters","dispatch","action","listeners","navigation","canGoBack","handled","resetRoot","getRootState","getStateForRoute","emitter","useEventEmitter","Object","acc","builderContext","context","getState","process","isSerializable","console","type","data","trackState","onStateChange"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  Route,\n  NavigationState,\n  InitialState,\n  PartialState,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useFocusedListeners from './useFocusedListeners';\nimport useDevTools from './useDevTools';\nimport useStateGetters from './useStateGetters';\nimport isSerializable from './isSerializable';\n\nimport { NavigationContainerRef, NavigationContainerProps } from './types';\nimport useEventEmitter from './useEventEmitter';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst MISSING_CONTEXT_ERROR =\n  \"Couldn't find a navigation context. Have you wrapped your app with 'NavigationContainer'? See https://reactnavigation.org/docs/getting-started.html for setup instructions.\";\n\nconst NOT_INITIALIZED_ERROR =\n  \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop.html#handling-initialization for more details.\";\n\nexport const NavigationStateContext = React.createContext<{\n  isDefault?: true;\n  state?: NavigationState | PartialState<NavigationState>;\n  getKey: () => string | undefined;\n  setKey: (key: string) => void;\n  getState: () => NavigationState | PartialState<NavigationState> | undefined;\n  setState: (\n    state: NavigationState | PartialState<NavigationState> | undefined\n  ) => void;\n}>({\n  isDefault: true,\n\n  get getKey(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get setKey(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get getState(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get setState(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n});\n\nlet hasWarnedForSerialization = false;\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  // @ts-ignore\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map(route => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref: React.Ref<NavigationContainerRef>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState] = useSyncState<State>(() =>\n      getPartialState(initialState == null ? undefined : initialState)\n    );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n    const skipTrackingRef = React.useRef<boolean>(false);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const reset = React.useCallback(\n      (state: NavigationState) => {\n        skipTrackingRef.current = true;\n        setState(state);\n      },\n      [setState]\n    );\n\n    const { trackState, trackAction } = useDevTools({\n      name: '@react-navigation',\n      reset,\n      state,\n    });\n\n    const {\n      listeners,\n      addListener: addFocusedListener,\n    } = useFocusedListeners();\n\n    const { getStateForRoute, addStateGetter } = useStateGetters();\n\n    const dispatch = (\n      action: NavigationAction | ((state: NavigationState) => NavigationAction)\n    ) => {\n      if (listeners[0] == null) {\n        throw new Error(NOT_INITIALIZED_ERROR);\n      }\n\n      listeners[0](navigation => navigation.dispatch(action));\n    };\n\n    const canGoBack = () => {\n      if (listeners[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners[0](navigation =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    };\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        trackAction('@@RESET_ROOT');\n        setState(state);\n      },\n      [setState, trackAction]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return getStateForRoute('root');\n    }, [getStateForRoute]);\n\n    const emitter = useEventEmitter();\n\n    React.useImperativeHandle(ref, () => ({\n      ...(Object.keys(CommonActions) as (keyof typeof CommonActions)[]).reduce<\n        any\n      >((acc, name) => {\n        acc[name] = (...args: any[]) =>\n          dispatch(\n            CommonActions[name](\n              // @ts-ignore\n              ...args\n            )\n          );\n        return acc;\n      }, {}),\n      ...emitter.create('root'),\n      resetRoot,\n      dispatch,\n      canGoBack,\n      getRootState,\n    }));\n\n    const builderContext = React.useMemo(\n      () => ({\n        addFocusedListener,\n        addStateGetter,\n        trackAction,\n      }),\n      [addFocusedListener, trackAction, addStateGetter]\n    );\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n      }),\n      [getKey, getState, setKey, setState, state]\n    );\n\n    React.useEffect(() => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (\n          state !== undefined &&\n          !isSerializable(state) &&\n          !hasWarnedForSerialization\n        ) {\n          hasWarnedForSerialization = true;\n\n          console.warn(\n            \"Non-serializable values were found in the navigation state, which can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting.html#i-get-the-warning-we-found-non-serializable-values-in-the-navigation-state for more details.\"\n          );\n        }\n      }\n\n      emitter.emit({\n        type: 'state',\n        data: { state },\n      });\n\n      if (skipTrackingRef.current) {\n        skipTrackingRef.current = false;\n      } else {\n        trackState(getRootState);\n      }\n\n      if (!isFirstMountRef.current && onStateChange) {\n        onStateChange(getRootState());\n      }\n\n      isFirstMountRef.current = false;\n    }, [onStateChange, trackState, getRootState, emitter, state]);\n\n    return (\n      <NavigationBuilderContext.Provider value={builderContext}>\n        <NavigationStateContext.Provider value={context}>\n          <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n        </NavigationStateContext.Provider>\n      </NavigationBuilderContext.Provider>\n    );\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"module"}