{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useOnAction(_ref) {\n  var router = _ref.router,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      key = _ref.key,\n      listeners = _ref.listeners,\n      routerConfigOptions = _ref.routerConfigOptions;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onActionParent = _React$useContext.onAction,\n      onRouteFocusParent = _React$useContext.onRouteFocus,\n      addActionListenerParent = _React$useContext.addActionListener,\n      trackAction = _React$useContext.trackAction;\n\n  var routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(function () {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  var onAction = React.useCallback(function (action) {\n    var visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    var state = getState();\n\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n\n    visitedNavigators.add(state.key);\n\n    if (typeof action.target === 'string' && action.target !== state.key) {\n      return false;\n    }\n\n    var result = router.getStateForAction(state, action, routerConfigOptionsRef.current);\n    result = result === null && action.target === state.key ? state : result;\n\n    if (result !== null) {\n      trackAction(action);\n\n      if (state !== result) {\n        setState(result);\n      }\n\n      if (onRouteFocusParent !== undefined) {\n        var shouldFocus = router.shouldActionChangeFocus(action);\n\n        if (shouldFocus && key !== undefined) {\n          onRouteFocusParent(key);\n        }\n      }\n\n      return true;\n    }\n\n    if (onActionParent !== undefined) {\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    for (var i = listeners.length - 1; i >= 0; i--) {\n      var listener = listeners[i];\n\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    return false;\n  }, [getState, router, onActionParent, trackAction, onRouteFocusParent, setState, key, listeners]);\n  React.useEffect(function () {\n    return addActionListenerParent === null || addActionListenerParent === void 0 ? void 0 : addActionListenerParent(onAction);\n  }, [addActionListenerParent, onAction]);\n  return onAction;\n}","map":{"version":3,"sources":["useOnAction.tsx"],"names":["routerConfigOptions","onAction","onRouteFocus","addActionListener","trackAction","React","routerConfigOptionsRef","visitedNavigators","state","getState","action","result","router","setState","onRouteFocusParent","shouldFocus","key","onActionParent","i","listeners","listener","addActionListenerParent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n} from './NavigationBuilderContext';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  listeners: ChildActionListener[];\n  routerConfigOptions: RouterConfigOptions;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  listeners,\n  routerConfigOptions,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addActionListener: addActionListenerParent,\n    trackAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef = React.useRef<RouterConfigOptions>(\n    routerConfigOptions\n  );\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target === 'string' && action.target !== state.key) {\n        return false;\n      }\n\n      let result = router.getStateForAction(\n        state,\n        action,\n        routerConfigOptionsRef.current\n      );\n\n      // If a target is specified and set to current navigator, the action shouldn't bubble\n      // So instead of `null`, we use the state object for such cases to signal that action was handled\n      result = result === null && action.target === state.key ? state : result;\n\n      if (result !== null) {\n        trackAction(action);\n\n        if (state !== result) {\n          setState(result);\n        }\n\n        if (onRouteFocusParent !== undefined) {\n          // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n          // This means we need to focus all of the parent navigators of this navigator as well\n          const shouldFocus = router.shouldActionChangeFocus(action);\n\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n\n        return true;\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = listeners.length - 1; i >= 0; i--) {\n        const listener = listeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      getState,\n      router,\n      onActionParent,\n      trackAction,\n      onRouteFocusParent,\n      setState,\n      key,\n      listeners,\n    ]\n  );\n\n  React.useEffect(() => addActionListenerParent?.(onAction), [\n    addActionListenerParent,\n    onAction,\n  ]);\n\n  return onAction;\n}\n"]},"metadata":{},"sourceType":"module"}